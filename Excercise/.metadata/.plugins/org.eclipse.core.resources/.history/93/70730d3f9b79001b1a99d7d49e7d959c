package geekTrust;

import java.util.List;

public class Family implements MessageConstants {

	private static String MALE = "Male";
	public FamilyMember head;

	public void addFamilyHead(String name, String gender) {
		Gender gen = null;
		if (gender.equalsIgnoreCase(MALE)) {
			gen = Gender.MALE;
		} else {
			gen = Gender.FEMALE;
		}
		this.head = new FamilyMember(name, gen, null, null, null);
	}

	public void addSpouse(String memberName, String spouseName, String gender) {
		// to add spouse first I have to find the Member. In sort I have to do Traversal
		// on a tree to find the member.

		FamilyMember member = doFindMember(head, memberName);
		if (member != null && member.spouse == null) {// before setting spouse check weather present or not.
			Gender gen = memberName.equalsIgnoreCase(MALE) ? Gender.MALE : Gender.FEMALE;
			FamilyMember spouse = new FamilyMember(memberName, gen, null, null, member);
			member.setSpouse(spouse);
		}
	}

	public String addChild(String childName, String motherName, String gender) {
		FamilyMember mother = doFindMember(head, motherName);
		if(mother == null) {
			//person not found;
			return PERSON_NOT_FOUND;
		}
		if(childName == null || childName.isEmpty() || gender == null || gender.isEmpty())
			return CHILD_ADDITION_FAILED;
		if(mother.gender == Gender.FEMALE) {
			Gender childGen = gender.equalsIgnoreCase(MALE) ? Gender.MALE : Gender.FEMALE;
			FamilyMember child = new FamilyMember(childName, childGen, mother.spouse, mother, null);
			mother.addChildren(child);
			return CHILD_ADDITION_SUCCEEDED;
		} else {
			return CHILD_ADDITION_FAILED;
		}
		return CHILD_ADDITION_SUCCEEDED;
	}
	
	private FamilyMember doFindMember(FamilyMember head, String memberName) {

		if (head == null || memberName == null)
			return null;

		if (head.name.equalsIgnoreCase(memberName)) {// Head is member
			return head;
		} else if (head.spouse != null && head.spouse.name.equalsIgnoreCase(memberName)) {
			return head.spouse;
		}

		// do traverse on Children of member if exists.
		List<FamilyMember> children = head.children;
		if (head.gender == Gender.MALE) {
			children = head.children;
		} else {
			children = head.spouse.children;
		}
		if (children != null && children.size() > 0) {
			for (FamilyMember mem : children) {
				FamilyMember member = doFindMember(mem, memberName);
				if (member != null) {// we found a member so no need to traverse further.
					return member;
				}
			}
		}
		return null;
	}
}
